<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ <p>CustomerAccountMapper</p>
  ~
  ~ Copyright (c)  http://www.batsoft.cn
  ~ @Date:        2018-04-14 10:20:38 
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.batsoft.service.module.exchange.dao.CustomerAccountDao">

    <resultMap id="baseResult" type="com.batsoft.model.module.exchange.vo.CustomerAccountVo">
        <result column="id" property="id" jdbcType="VARCHAR"/>
        <result column="coin_code" property="coinCode" jdbcType="VARCHAR"/>
        <result column="available" property="available" jdbcType="DECIMAL"/>
        <result column="freeze" property="freeze" jdbcType="DECIMAL"/>
        <result column="coin_logo" property="coinLogo" jdbcType="VARCHAR"/>
        <result column="allow_recharge" property="allowRecharge" jdbcType="INTEGER"/>
        <result column="allow_withdraw" property="allowWithdraw" jdbcType="INTEGER"/>
        <result column="coin_confirm" property="confirm" jdbcType="INTEGER"/>
        <result column="coin_address" property="coinAddress" jdbcType="VARCHAR"/>
        <result column="memo" property="memo" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
    </resultMap>



    <select id="findList" resultMap="baseResult" parameterType="java.util.HashMap">
        SELECT
        f.coin_code,
        f.available,
        f.freeze,
        c.coinLogo as coin_logo,
        c.allow_recharge as allow_recharge,
        c.allow_withdraw as allow_withdraw
        FROM  exchange_customer_account f  RIGHT JOIN
        exchange_coin as c on f.coin_code =c.coin_code
        WHERE  f.user_id=#{userId,jdbcType=VARCHAR}
        AND c.status=1 AND c.del=0  ORDER  BY  c.sort ASC
    </select>

    <select id="findListByIdAndStatue" resultMap="baseResult" parameterType="java.util.HashMap">
        SELECT
        f.coin_code,
        f.available,
        f.freeze,
        c.coinLogo as coin_logo,
        c.allow_recharge as allow_recharge,
        c.allow_withdraw as allow_withdraw
        FROM  exchange_customer_account f  RIGHT JOIN
        exchange_coin as c on f.coin_code =c.coin_code
        where  f.user_id=#{id,jdbcType=VARCHAR} AND c.status=#{status,jdbcType=INTEGER}
       AND c.del=0  ORDER  BY  c.sort ASC
    </select>

    <select id="findListAll" resultMap="baseResult">
        SELECT
        f.coin_code,
        f.available,
        f.freeze,
        f.user_id,
        c.coinLogo as coin_logo,
        c.allow_recharge as allow_recharge,
        c.allow_withdraw as allow_withdraw
        FROM  exchange_customer_account f  RIGHT JOIN
        exchange_coin as c on f.coin_code = c.coin_code
        WHERE   c.status=1 AND c.del=0  ORDER  BY  c.sort ASC
    </select>

    <select id="findCoinAccount" resultMap="baseResult" >
        SELECT
        f.id,
        f.coin_code,
        f.available,
        f.freeze,
        f.coin_address,
        f.user_id,
        f.memo,
        c.coinLogo as coin_logo,
        c.allow_recharge as allow_recharge,
        c.allow_withdraw as allow_withdraw,
        c.coin_confirm as confirm
        FROM  exchange_customer_account f  LEFT  JOIN
        exchange_coin as c on f.coin_code=#{coinCode,jdbcType=VARCHAR} AND f.coin_code =c.coin_code
        WHERE  f.user_id=#{userId,jdbcType=VARCHAR}
        AND c.status=1 AND c.del=0  ORDER  BY  c.sort ASC
    </select>

        <insert id="insertBatch" parameterType="java.util.List">
            insert into exchange_customer_account(id,coin_code,user_id,user_name) values
            <foreach collection="list" item="item" separator=",">
                (#{item.id},#{item.coinCode},#{item.userId},#{item.userName})
            </foreach>
        </insert>

</mapper>
